{"name":"PluploadMvc","tagline":"Integrating Plupload with ASP.NET MVC.","body":"# PluploadMvc\r\n\r\n`PluploadMvc` contains server side components to make it easy to integrate [Plupload](http://plupload.com) into your ASP.NET MVC application. It can be used to deeply integrate [Plupload](http://plupload.com) to make it feel like you're using a normal file input field, but you can also just use it for the included `PluploadHandler` (also supporting [chunked file uploads](http://plupload.com/docs/Chunking)) + `PluploadContext` to easily retrieve the uploaded files. \r\n\r\n[![Build status](http://img.shields.io/appveyor/ci/mwijnands/pluploadmvc.svg?style=flat)](https://ci.appveyor.com/project/mwijnands/pluploadmvc) [![NuGet version](http://img.shields.io/nuget/v/XperiCode.PluploadMvc.svg?style=flat)](https://www.nuget.org/packages/XperiCode.PluploadMvc)\r\n\r\n## Installation\r\n\r\nThe `PluploadMvc` package is available at [NuGet](https://www.nuget.org/packages/XperiCode.PluploadMvc). To install `PluploadMvc`, run the following command in the [Package Manager Console](http://docs.nuget.org/docs/start-here/using-the-package-manager-console):\r\n\r\n> #### Install-Package XperiCode.PluploadMvc\r\n\r\n## Documentation\r\n\r\nI will start with some examples of using the various server side components separately, to eventually get to a full integration example. All examples are built off of the [Plupload Core API sample](http://plupload.com/examples/core) from the Plupload website at [http://plupload.com/examples/core](http://plupload.com/examples/core).\r\n\r\n#### PluploadHandler\r\n\r\n`PluploadMvc` includes an `HttpHandler` that can be used to handle uploaded files that are uploaded by [Plupload](http://plupload.com). It is added to the `Web.config` as `Plupload.axd` automatically when using [NuGet]([NuGet](https://www.nuget.org/packages/XperiCode.PluploadMvc)) to install the package.\r\n\r\n```xml\r\n<system.webServer>\r\n    <handlers>\r\n        <add name=\"PluploadHandler\" path=\"Plupload.axd\" verb=\"POST\" type=\"XperiCode.PluploadMvc.PluploadHandler, XperiCode.PluploadMvc\" />\r\n    </handlers>\r\n</system.webServer>\r\n```\r\n\r\nThis `HttpHandler` can be used to handle file uploads from [Plupload](http://plupload.com). To be able to retrieve the uploaded files later, **you need to pass the HttpHandler a reference in the form of a String (I would recommend a Guid)**. So in javascript, the url option passed to the plupload.Uploader constructor should be something like this:\r\n\r\n```c#\r\nvar uploader = new plupload.Uploader({\r\n    // ...\r\n    url : \"/plupload.axd?reference=13095a38-6841-4204-a2cc-61135d812436\",\r\n    // ...\r\n});\r\n```\r\n\r\nThe URL to the upload handler can be generated in a View (for example to render in a data-attribute to be read by your javascript) using the included UrlHelper extension methods:\r\n\r\n```c#\r\n@using XperiCode.PluploadMvc\r\n\r\n<div data-plupload-url=\"@Url.PluploadHandler(\"13095a38-6841-4204-a2cc-61135d812436\")\">\r\n\t...\r\n</div>\r\n\r\n```\r\n\r\nWhen you change the url of the upload handler (default is ~/Plupload.axd), you can configure this UrlHelper extension method to output another url using the `PluploadConfiguration` class.\r\n\r\nThe `PluploadHandler` will now handle the file uploads (it handles [chunked uploads](http://plupload.com/docs/Chunking) as well as normal uploads), and saves the files to a temporary folder at `~/App_Data/PluploadMvc/13095a38-6841-4204-a2cc-61135d812436/`. This folder is configurable using the static `PluploadConfiguration` class.\r\n\r\n#### PluploadContext\r\n\r\nTo easily retrieve the uploaded files, you can use `PluploadContext`. You should not create an instance of this class yourself. Instead, get it off `HttpContextBase` by using the provided extension method `GetPluploadContext()`. For example, within a `Controller` you could use:\r\n\r\n```c#\r\nusing XperiCode.PluploadMvc;\r\n// ...\r\nvar pluploadContext = HttpContext.GetPluploadContext();\r\n```\r\n\r\nAfter acquiring the `PluploadContext`, you can use the `GetFiles()` method to retrieve the files that were uploaded using the specific `reference`:\r\n\r\n```c#\r\nstring reference = \"13095a38-6841-4204-a2cc-61135d812436\";\r\nvar uploadedFiles = pluploadContext.GetFiles(reference);\r\n```\r\n\r\n`uploadedFiles` will now contain a list of `PluploadFile` objects (inheriting `HttpPostedFileBase`) for you to work with. When you're done with the files (for example, you saved them to a database), you can use the `DeleteFiles()` method to delete them from the temporary folder. If you don't, they will keep being returned when calling `GetFiles()` using the same reference.\r\n\r\n```c#\r\npluploadContext.DeleteFiles(reference);\r\n```\r\n\r\n`PluploadContext` also has a static method `CleanupFiles()` you could use on application startup, to cleanup the temporary `~/App_Data/PluploadMvc/` folder. When using the [NuGet package](https://www.nuget.org/packages/XperiCode.PluploadMvc) to install `PluploadMvc`, this is added to your application automatically by adding `PluploadMvcConfig.cs` to the `App_Start` folder and using [WebActivatorEx](https://www.nuget.org/packages/WebActivatorEx/2.0.0) to execute it on application startup.\r\n\r\n```c#\r\nusing XperiCode.PluploadMvc;\r\n// ...\r\nPluploadContext.CleanupFiles();\r\n```\r\n\r\n#### PluploadModelBinder\r\n\r\nExamples of a full integration using a ViewModel and ModelBinder are coming, and this can already be found in the [sample project on GitHub](https://github.com/mwijnands/PluploadMvc/tree/master/PluploadMvc.Sample).\r\n\r\n## (Unit) testing\r\n\r\nWhen using `PluploadMvc`, you can still test your controllers. The `HttpContextBase` extension method `GetPluploadContext()` returns an `IPluploadContext`. To make this return a `Mock`, you can use the extension method `SetPluploadContext()` first to set your `Mock`, so that when `GetPluploadContext()` is called in the code under test, it will return your `Mock`. Examples of this can be found in the tests of this project on [GitHub](https://github.com/mwijnands/PluploadMvc).\r\n\r\n## Release notes\r\n\r\n#### v0.3.0\r\n\r\n- Reference (to upload and retrieve files with) is now a string for more flexibility.\r\n- Added an UrlHelper extension method to retrieve the URL to the upload handler.\r\n- Introduced the PluploadConfiguration class, to configure the upload path and pluploadhandler path.\r\n- Fixed thrown IOException when uploading chunked file and the file already exists.\r\n\r\n#### v0.2.0\r\n\r\n- Added support for [chunked uploads](http://plupload.com/docs/Chunking)\r\n\r\n#### v0.1.1\r\n- Changed Microsoft.AspNet.Mvc dependencies to 5.0.0 (5.2.0 was unnecessary)\r\n\r\n#### v0.1.0\r\n\r\n- Initial release\r\n\r\n## Collaboration\r\n\r\nPlease report issues if you find any. Pull requests are welcome for documentation and code.\r\n","google":"UA-58216824-1","note":"Don't delete this file! It's used internally to help with page regeneration."}